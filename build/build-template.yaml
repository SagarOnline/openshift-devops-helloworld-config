apiVersion: v1
kind: Template
labels:
  template: application-template
message: |-
  This template creates the Openshift BuildConfig and related Resources to Build application source code.  
metadata:
  annotations:
    openshift.io/display-name: Build Template
    description: |-
      This template creates below Openshift\Kubernetes Resources to build the application 
      1. BuildConfig : It uses dockerStrategy to build the docker image and push into internal registry.
      2. ImageStream : It creates an ImageStream for the application. All DeploymentConfig resources created by release pipeline 
                       references the ImageStreamTag from this ImageStream. 
  name: application-template
parameters:
- description: The name of the application to which this template belongs. It should not have any whitespaces. for e.g. marketdata, accounts, etc.
  displayName: Application Name
  name: APP_NAME
  required: true
- description: The release name of the application. for e.g. v1, v2, apple, banana, cherry , etc
  displayName: Release Name
  name: RELEASE_NAME
  required: true
- description: Port on which application should start. 
  displayName: application port
  name: CONTAINER_PORT
  required: true

objects:

# BuildConfig definition to build docker image and push to ImageStream
- apiVersion: v1
  kind: "BuildConfig"
  metadata:
    name: "${APP_NAME}-${RELEASE_NAME}-build"
    labels:
      app: ${APP_NAME}
      environment: ${APP_NAME}-dev
  spec:
    runPolicy: "Serial"
    source:
      type: "Binary"
    strategy:
      type: "Docker"
      dockerStrategy:
        dockerfilePath: Dockerfile
        env:
          - name: "BUILD_LOGLEVEL"
            value: "5"
    output:
      to:
        kind: "ImageStreamTag"
        name: "${APP_NAME}:${RELEASE_NAME}"

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
      environment: ${APP_NAME}-dev
    name: ${APP_NAME}-dc
  spec:
    replicas: 2
    selector:
      environment: ${APP_NAME}-dev
    template:
      metadata:
        labels:
          environment: ${APP_NAME}-dev
      spec:
        containers:
          - image: ${APP_NAME}:${RELEASE_NAME}-dev
            imagePullPolicy: IfNotPresent
            resources: {}
            name: ${APP_NAME}
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: '${APP_NAME}:${RELEASE_NAME}-dev'
        type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
      environment: ${APP_NAME}-dev
    name: ${APP_NAME}-svc
  spec:
    ports:
      - port: 80
        protocol: TCP
        targetPort: ${{CONTAINER_PORT}}
    selector:
      environment: ${APP_NAME}-dev
    sessionAffinity: None
    type: ClusterIP

 # ImageStream to be used by DeploymentConfig to rollout application       
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}