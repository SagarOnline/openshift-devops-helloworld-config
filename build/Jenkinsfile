try {
    timeout(time: 20, unit: 'MINUTES') {
        
        node('nodejs') {
            stage('Checkout') {
                echo 'Checkout Application Code'
                git(url:"${APP_SOURCE_GIT_REPO}"
                        , branch:'master')
                sh 'ls -lrst'
                sh 'cd angularclient && npm install && npm run build'
                stash name: 'workspace', excludes: 'angularclient/**'
            }
            /*stage('Build') {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo 'Creating Rollout Resources in Dev environment'
                        unstash 'workspace'
                        sh 'ls -lrst'
                        openshift.create( openshift.process("-f=release/dev/rollout-template.yaml", 
                                            "--param-file=release/release.properties",
                                            "--param-file=application.properties",
                                            "--ignore-unknown-parameters=true"
                                            ))
                                            
                        
                    }
                }
            }
            */
            
        }

        node('maven') {
            stage('Maven Build') {
                git(url:"${APP_CONFIG_GIT_REPO}"
                        , branch:'master')
                unstash 'workspace'
                sh 'ls -lrst'
                echo 'Packaging maven application'
                sh 'mvn package'
            }

            stage('Docker Build') {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo 'Building docker image'
                        
                        //unstash 'workspace'
                        sh 'ls -lrst'

                        // Create a secret for GitHub webhook. This secret is referred by BuildConfig to trigger the build on new commit.
                        def appSourceSecret = openshift.selector("secret", '"${APP_SOURCE_GIT_REPO_SECRET_NAME}""')
                        if(!appSourceSecret){
                            //TODO : For demo purpose secret is hardcoded here, 
                            //       but in real project it should be parameterized to Jenkins pipeline
                            sh 'oc create secret generic "${APP_SOURCE_GIT_REPO_SECRET_NAME}" --from-literal WebHookSecretKey=HelloworldSourceGitRepoSecret'
                            
                        }
                        def buildConfig = openshift.selector("bc", '"${APP_NAME}"')
                        if(!buildConfig.exists()){
                            // Create a secret for GitHub webhook. This secret is referred by BuildConfig to trigger the build on new commit.

                            //TODO : For demo purpose secret is hardcoded here, 
                            //       but in real project it should be parameterized to Jenkins pipeline
                            sh 'oc create secret generic "${APP_SOURCE_GIT_REPO_SECRET_NAME}" --from-literal WebHookSecretKey=HelloworldSourceGitRepoSecret'
                            
                            openshift.create( openshift.process("-f=build/build-template.yaml", 
                                                "--param-file=release/release.properties",
                                                "--param-file=application.properties",
                                                "--ignore-unknown-parameters=true"
                                                ))
                        }
                        sh 'tar -cvf context.tar target/"${APP_NAME}".jar Dockerfile'
                        sh 'oc start-build "${APP_NAME}"-"${RELEASE_NAME}"-build --from-archive=context.tar'
                        //buildConfig = openshift.selector("bc", "${APP_NAME}").object()
                        //buildConfig.startBuild()
                                           
                        
                    }
                }
            }
        }
    }
} catch (err) {
    echo "in catch block"
    echo "Caught: ${err}"
    currentBuild.result = 'FAILURE'
    throw err
}          