apiVersion: v1
kind: Template
labels:
  template: release-management-setup-template
message: |-
  A Jenkins server must be instantiated in this project to manage
  the Pipeline BuildConfig created by this template.  
metadata:
  annotations:
    openshift.io/display-name: Helloworld application
    description: |-
      This template defines a release for application, processing a template will  
      1. create a Rollout pipeline for Dev environment of specified application and version. 
         Refer BuildConfig having name ${APP_NAME}-${RELEASE_NAME}-dev-rollout
      2. TODOs : update description as more features are added into this template.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: helloworld
parameters:
- description: The name of the application to which this template belongs. It should not have any whitespaces. for e.g. marketdata, accounts, etc.
  displayName: Application Name
  name: APP_NAME
  required: true
- description: The release name of the application. for e.g. v1, v2, apple, banana, cherry , etc
  displayName: Release Name
  name: RELEASE_NAME
  required: true
- description: Git repository url of the application configuration where all DevOps configuration are maintained such as Jenkinsfiles, parameters, etc.
  displayName: Git repository URL of Application Config
  name: APP_CONFIG_GIT_REPO
  required: true
- description: Git repository url of the application source code 
  displayName: Git repository URL of Application source code
  name: APP_SOURCE_GIT_REPO
  required: true
- description: Path of Jenkinsfile to build application code. It should be relative to the context directory specified by 'APP_CONFIG_GIT_REPO' param.
  displayName: Path of Jenkinsfile to build application code
  name: BUILD_JENKINSFILE_PATH
  value: dev/pipelines/build/Jenkinsfile
  required: true
- description: Name of secret to be used by build pipeline (BuildConfig Trigger) for Github webhook.
  displayName: Secret name used by build pipeline Github trigger
  name: APP_SOURCE_GIT_REPO_SECRET_NAME
  required: true
- description: Port on which application should start. 
  displayName: application port
  name: CONTAINER_PORT
  required: true

objects:


# Build Pipeline definition. It will trigger the Jenkins pipeline to build application code. 
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    name: ${APP_NAME}-build
  spec:
    source:
      git:
        uri: ${APP_CONFIG_GIT_REPO}
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: ${BUILD_JENKINSFILE_PATH}
        env:
        - name: APP_SOURCE_GIT_REPO
          value: ${APP_SOURCE_GIT_REPO}
        - name: APP_CONFIG_GIT_REPO
          value: ${APP_CONFIG_GIT_REPO}
        - name: APP_NAME
          value: ${APP_NAME}
        - name: APP_SOURCE_GIT_REPO_SECRET_NAME
          value: ${APP_SOURCE_GIT_REPO_SECRET_NAME}  
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${APP_SOURCE_GIT_REPO_SECRET_NAME}
      type: GitHub

# BuildConfig definition to build docker image and push to ImageStream
- apiVersion: v1
  kind: "BuildConfig"
  metadata:
    name: "${APP_NAME}-docker-image-build"
    labels:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
  spec:
    runPolicy: "Serial"
    source:
      type: "Binary"
    strategy:
      type: "Docker"
      dockerStrategy:
        dockerfilePath: Dockerfile
        env:
          - name: "BUILD_LOGLEVEL"
            value: "5"
    output:
      to:
        kind: "ImageStreamTag"
        name: "${APP_NAME}:${RELEASE_NAME}-dev"

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    name: ${APP_NAME}-dc
  spec:
    replicas: 2
    selector:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          release: ${RELEASE_NAME}
          environment: dev
      spec:
        containers:
          - image: ${APP_NAME}:${RELEASE_NAME}-dev
            imagePullPolicy: IfNotPresent
            resources: {}
            name: ${APP_NAME}
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: '${APP_NAME}:${RELEASE_NAME}-dev'
        type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    name: ${APP_NAME}-svc
  spec:
    ports:
      - port: 80
        protocol: TCP
        targetPort: ${{CONTAINER_PORT}}
    selector:
      application: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    name: ${APP_NAME}-route
  spec:
    to:
      kind: Service
      name: ${APP_NAME}-svc
      weight: 100
    wildcardPolicy: None
 # ImageStream to be used by DeploymentConfig to rollout application       
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
      release: ${RELEASE_NAME}
      environment: dev
    name: ${APP_NAME}